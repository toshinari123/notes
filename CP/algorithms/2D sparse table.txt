int s[log n][n][log m][m];

s[ix][jx][iy][jy] contains min / max in submatrix (jx, jy, jx + 2 ^ ix - 1, jy + 2 ^ iy - 1)

First, initialize all rows.

for (int jx = 0; jx < n; jx++){
    for (int jy = 0; jy < m; jy++){
        s[0][jx][0][jy] = a[jx][jy];
    }
    for (int iy = 1; iy < 20; iy++){
        for (int jy = 0; jy + (1 << (iy - 1)) < m; jy++){
            s[0][jx][iy][jy] = min(s[0][jx][iy - 1][jy], s[0][jx][iy - 1][jy + (1 << (iy - 1))]);
        }
    }
}

Then build the entire table.

for (int ix = 0; ix < 20; ix++){
    for (int jx = 0; jx + (1 << (ix - 1)) < n; jx++){
        for (int iy = 0; iy < 20; i++){
            for (int jy = 0; jy + (1 << (iy - 1)) < m; jy++){
                s[ix][jx][iy][jy] = min(s[ix - 1][jx][iy][jy], s[ix - 1][jx + (1 << (ix - 1))][iy][jy]);
            }
        }
    }
}

Build time: O(n * m * log n * log m)

To query, divide the matrix into 4 overlapping matrices.

int kx = log2(x2 - x1 + 1), ky = log2(y2 - y1 + 1);

x ranges: (x1, x1 + (1 << kx) - 1), (x2 - (1 << kx) + 1, x2)
y ranges: (y1, y1 + (1 << ky) - 1), (y2 - (1 << ky) + 1, y2)

Therefore, the result is minimum of:

s[kx][x1][ky][y1]
s[kx][x1][ky][y2 - (1 << ky) + 1]
s[kx][x2 - (1 << kx) + 1][ky][y1]
s[kx][x2 - (1 << kx) + 1][ky][y2 - (1 << ky) + 1]

Query time: O(1)